// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: content/content.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentService_PostQuestion_FullMethodName                = "/content.ContentService/PostQuestion"
	ContentService_GetQuestionsByUserID_FullMethodName        = "/content.ContentService/GetQuestionsByUserID"
	ContentService_GetQuestionsByTags_FullMethodName          = "/content.ContentService/GetQuestionsByTags"
	ContentService_GetQuestionsByWord_FullMethodName          = "/content.ContentService/GetQuestionsByWord"
	ContentService_DeleteQuestion_FullMethodName              = "/content.ContentService/DeleteQuestion"
	ContentService_GetQuestionByID_FullMethodName             = "/content.ContentService/GetQuestionByID"
	ContentService_PostAnswerByQuestionID_FullMethodName      = "/content.ContentService/PostAnswerByQuestionID"
	ContentService_DeleteAnswerByAnswerID_FullMethodName      = "/content.ContentService/DeleteAnswerByAnswerID"
	ContentService_UpvoteAnswerByAnswerID_FullMethodName      = "/content.ContentService/UpvoteAnswerByAnswerID"
	ContentService_DownvoteAnswerByAnswerID_FullMethodName    = "/content.ContentService/DownvoteAnswerByAnswerID"
	ContentService_FlagQuestion_FullMethodName                = "/content.ContentService/FlagQuestion"
	ContentService_FlagAnswer_FullMethodName                  = "/content.ContentService/FlagAnswer"
	ContentService_MarkQuestionAsAnswered_FullMethodName      = "/content.ContentService/MarkQuestionAsAnswered"
	ContentService_GetFlaggedQuestions_FullMethodName         = "/content.ContentService/GetFlaggedQuestions"
	ContentService_GetFlaggedAnswers_FullMethodName           = "/content.ContentService/GetFlaggedAnswers"
	ContentService_GetUserFeed_FullMethodName                 = "/content.ContentService/GetUserFeed"
	ContentService_AddTag_FullMethodName                      = "/content.ContentService/AddTag"
	ContentService_RemoveTag_FullMethodName                   = "/content.ContentService/RemoveTag"
	ContentService_SearchQuestionsAnswersUsers_FullMethodName = "/content.ContentService/SearchQuestionsAnswersUsers"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	PostQuestion(ctx context.Context, in *PostQuestionRequest, opts ...grpc.CallOption) (*PostQuestionResponse, error)
	GetQuestionsByUserID(ctx context.Context, in *GetQuestionsByUserIDRequest, opts ...grpc.CallOption) (*GetQuestionsByUserIDResponse, error)
	GetQuestionsByTags(ctx context.Context, in *GetQuestionsByTagsRequest, opts ...grpc.CallOption) (*GetQuestionsByTagsResponse, error)
	GetQuestionsByWord(ctx context.Context, in *GetQuestionsByWordRequest, opts ...grpc.CallOption) (*GetQuestionsByWordResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	GetQuestionByID(ctx context.Context, in *GetQuestionByIDRequest, opts ...grpc.CallOption) (*GetQuestionByIDResponse, error)
	PostAnswerByQuestionID(ctx context.Context, in *PostAnswerByQuestionIDRequest, opts ...grpc.CallOption) (*PostAnswerByQuestionIDResponse, error)
	DeleteAnswerByAnswerID(ctx context.Context, in *DeleteAnswerByAnswerIDRequest, opts ...grpc.CallOption) (*DeleteAnswerByAnswerIDResponse, error)
	UpvoteAnswerByAnswerID(ctx context.Context, in *UpvoteAnswerByAnswerIDRequest, opts ...grpc.CallOption) (*UpvoteAnswerByAnswerIDResponse, error)
	DownvoteAnswerByAnswerID(ctx context.Context, in *DownvoteAnswerByAnswerIDRequest, opts ...grpc.CallOption) (*DownvoteAnswerByAnswerIDResponse, error)
	FlagQuestion(ctx context.Context, in *FlagQuestionRequest, opts ...grpc.CallOption) (*FlagQuestionResponse, error)
	FlagAnswer(ctx context.Context, in *FlagAnswerRequest, opts ...grpc.CallOption) (*FlagAnswerResponse, error)
	MarkQuestionAsAnswered(ctx context.Context, in *MarkQuestionAsAnsweredRequest, opts ...grpc.CallOption) (*MarkQuestionAsAnsweredResponse, error)
	GetFlaggedQuestions(ctx context.Context, in *GetFlaggedQuestionsRequest, opts ...grpc.CallOption) (*GetFlaggedQuestionsResponse, error)
	GetFlaggedAnswers(ctx context.Context, in *GetFlaggedAnswersRequest, opts ...grpc.CallOption) (*GetFlaggedAnswersResponse, error)
	GetUserFeed(ctx context.Context, in *GetUserFeedRequest, opts ...grpc.CallOption) (*GetUserFeedResponse, error)
	AddTag(ctx context.Context, in *AddTagRequest, opts ...grpc.CallOption) (*AddTagResponse, error)
	RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error)
	SearchQuestionsAnswersUsers(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) PostQuestion(ctx context.Context, in *PostQuestionRequest, opts ...grpc.CallOption) (*PostQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostQuestionResponse)
	err := c.cc.Invoke(ctx, ContentService_PostQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetQuestionsByUserID(ctx context.Context, in *GetQuestionsByUserIDRequest, opts ...grpc.CallOption) (*GetQuestionsByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsByUserIDResponse)
	err := c.cc.Invoke(ctx, ContentService_GetQuestionsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetQuestionsByTags(ctx context.Context, in *GetQuestionsByTagsRequest, opts ...grpc.CallOption) (*GetQuestionsByTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsByTagsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetQuestionsByTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetQuestionsByWord(ctx context.Context, in *GetQuestionsByWordRequest, opts ...grpc.CallOption) (*GetQuestionsByWordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsByWordResponse)
	err := c.cc.Invoke(ctx, ContentService_GetQuestionsByWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, ContentService_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetQuestionByID(ctx context.Context, in *GetQuestionByIDRequest, opts ...grpc.CallOption) (*GetQuestionByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionByIDResponse)
	err := c.cc.Invoke(ctx, ContentService_GetQuestionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) PostAnswerByQuestionID(ctx context.Context, in *PostAnswerByQuestionIDRequest, opts ...grpc.CallOption) (*PostAnswerByQuestionIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostAnswerByQuestionIDResponse)
	err := c.cc.Invoke(ctx, ContentService_PostAnswerByQuestionID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteAnswerByAnswerID(ctx context.Context, in *DeleteAnswerByAnswerIDRequest, opts ...grpc.CallOption) (*DeleteAnswerByAnswerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnswerByAnswerIDResponse)
	err := c.cc.Invoke(ctx, ContentService_DeleteAnswerByAnswerID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpvoteAnswerByAnswerID(ctx context.Context, in *UpvoteAnswerByAnswerIDRequest, opts ...grpc.CallOption) (*UpvoteAnswerByAnswerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpvoteAnswerByAnswerIDResponse)
	err := c.cc.Invoke(ctx, ContentService_UpvoteAnswerByAnswerID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DownvoteAnswerByAnswerID(ctx context.Context, in *DownvoteAnswerByAnswerIDRequest, opts ...grpc.CallOption) (*DownvoteAnswerByAnswerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownvoteAnswerByAnswerIDResponse)
	err := c.cc.Invoke(ctx, ContentService_DownvoteAnswerByAnswerID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) FlagQuestion(ctx context.Context, in *FlagQuestionRequest, opts ...grpc.CallOption) (*FlagQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagQuestionResponse)
	err := c.cc.Invoke(ctx, ContentService_FlagQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) FlagAnswer(ctx context.Context, in *FlagAnswerRequest, opts ...grpc.CallOption) (*FlagAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagAnswerResponse)
	err := c.cc.Invoke(ctx, ContentService_FlagAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) MarkQuestionAsAnswered(ctx context.Context, in *MarkQuestionAsAnsweredRequest, opts ...grpc.CallOption) (*MarkQuestionAsAnsweredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkQuestionAsAnsweredResponse)
	err := c.cc.Invoke(ctx, ContentService_MarkQuestionAsAnswered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetFlaggedQuestions(ctx context.Context, in *GetFlaggedQuestionsRequest, opts ...grpc.CallOption) (*GetFlaggedQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlaggedQuestionsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetFlaggedQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetFlaggedAnswers(ctx context.Context, in *GetFlaggedAnswersRequest, opts ...grpc.CallOption) (*GetFlaggedAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlaggedAnswersResponse)
	err := c.cc.Invoke(ctx, ContentService_GetFlaggedAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetUserFeed(ctx context.Context, in *GetUserFeedRequest, opts ...grpc.CallOption) (*GetUserFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFeedResponse)
	err := c.cc.Invoke(ctx, ContentService_GetUserFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) AddTag(ctx context.Context, in *AddTagRequest, opts ...grpc.CallOption) (*AddTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTagResponse)
	err := c.cc.Invoke(ctx, ContentService_AddTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTagResponse)
	err := c.cc.Invoke(ctx, ContentService_RemoveTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SearchQuestionsAnswersUsers(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ContentService_SearchQuestionsAnswersUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility.
type ContentServiceServer interface {
	PostQuestion(context.Context, *PostQuestionRequest) (*PostQuestionResponse, error)
	GetQuestionsByUserID(context.Context, *GetQuestionsByUserIDRequest) (*GetQuestionsByUserIDResponse, error)
	GetQuestionsByTags(context.Context, *GetQuestionsByTagsRequest) (*GetQuestionsByTagsResponse, error)
	GetQuestionsByWord(context.Context, *GetQuestionsByWordRequest) (*GetQuestionsByWordResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	GetQuestionByID(context.Context, *GetQuestionByIDRequest) (*GetQuestionByIDResponse, error)
	PostAnswerByQuestionID(context.Context, *PostAnswerByQuestionIDRequest) (*PostAnswerByQuestionIDResponse, error)
	DeleteAnswerByAnswerID(context.Context, *DeleteAnswerByAnswerIDRequest) (*DeleteAnswerByAnswerIDResponse, error)
	UpvoteAnswerByAnswerID(context.Context, *UpvoteAnswerByAnswerIDRequest) (*UpvoteAnswerByAnswerIDResponse, error)
	DownvoteAnswerByAnswerID(context.Context, *DownvoteAnswerByAnswerIDRequest) (*DownvoteAnswerByAnswerIDResponse, error)
	FlagQuestion(context.Context, *FlagQuestionRequest) (*FlagQuestionResponse, error)
	FlagAnswer(context.Context, *FlagAnswerRequest) (*FlagAnswerResponse, error)
	MarkQuestionAsAnswered(context.Context, *MarkQuestionAsAnsweredRequest) (*MarkQuestionAsAnsweredResponse, error)
	GetFlaggedQuestions(context.Context, *GetFlaggedQuestionsRequest) (*GetFlaggedQuestionsResponse, error)
	GetFlaggedAnswers(context.Context, *GetFlaggedAnswersRequest) (*GetFlaggedAnswersResponse, error)
	GetUserFeed(context.Context, *GetUserFeedRequest) (*GetUserFeedResponse, error)
	AddTag(context.Context, *AddTagRequest) (*AddTagResponse, error)
	RemoveTag(context.Context, *RemoveTagRequest) (*RemoveTagResponse, error)
	SearchQuestionsAnswersUsers(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentServiceServer struct{}

func (UnimplementedContentServiceServer) PostQuestion(context.Context, *PostQuestionRequest) (*PostQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostQuestion not implemented")
}
func (UnimplementedContentServiceServer) GetQuestionsByUserID(context.Context, *GetQuestionsByUserIDRequest) (*GetQuestionsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByUserID not implemented")
}
func (UnimplementedContentServiceServer) GetQuestionsByTags(context.Context, *GetQuestionsByTagsRequest) (*GetQuestionsByTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByTags not implemented")
}
func (UnimplementedContentServiceServer) GetQuestionsByWord(context.Context, *GetQuestionsByWordRequest) (*GetQuestionsByWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByWord not implemented")
}
func (UnimplementedContentServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedContentServiceServer) GetQuestionByID(context.Context, *GetQuestionByIDRequest) (*GetQuestionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionByID not implemented")
}
func (UnimplementedContentServiceServer) PostAnswerByQuestionID(context.Context, *PostAnswerByQuestionIDRequest) (*PostAnswerByQuestionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAnswerByQuestionID not implemented")
}
func (UnimplementedContentServiceServer) DeleteAnswerByAnswerID(context.Context, *DeleteAnswerByAnswerIDRequest) (*DeleteAnswerByAnswerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswerByAnswerID not implemented")
}
func (UnimplementedContentServiceServer) UpvoteAnswerByAnswerID(context.Context, *UpvoteAnswerByAnswerIDRequest) (*UpvoteAnswerByAnswerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpvoteAnswerByAnswerID not implemented")
}
func (UnimplementedContentServiceServer) DownvoteAnswerByAnswerID(context.Context, *DownvoteAnswerByAnswerIDRequest) (*DownvoteAnswerByAnswerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownvoteAnswerByAnswerID not implemented")
}
func (UnimplementedContentServiceServer) FlagQuestion(context.Context, *FlagQuestionRequest) (*FlagQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlagQuestion not implemented")
}
func (UnimplementedContentServiceServer) FlagAnswer(context.Context, *FlagAnswerRequest) (*FlagAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlagAnswer not implemented")
}
func (UnimplementedContentServiceServer) MarkQuestionAsAnswered(context.Context, *MarkQuestionAsAnsweredRequest) (*MarkQuestionAsAnsweredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkQuestionAsAnswered not implemented")
}
func (UnimplementedContentServiceServer) GetFlaggedQuestions(context.Context, *GetFlaggedQuestionsRequest) (*GetFlaggedQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlaggedQuestions not implemented")
}
func (UnimplementedContentServiceServer) GetFlaggedAnswers(context.Context, *GetFlaggedAnswersRequest) (*GetFlaggedAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlaggedAnswers not implemented")
}
func (UnimplementedContentServiceServer) GetUserFeed(context.Context, *GetUserFeedRequest) (*GetUserFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFeed not implemented")
}
func (UnimplementedContentServiceServer) AddTag(context.Context, *AddTagRequest) (*AddTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedContentServiceServer) RemoveTag(context.Context, *RemoveTagRequest) (*RemoveTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTag not implemented")
}
func (UnimplementedContentServiceServer) SearchQuestionsAnswersUsers(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQuestionsAnswersUsers not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}
func (UnimplementedContentServiceServer) testEmbeddedByValue()                        {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_PostQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PostQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_PostQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PostQuestion(ctx, req.(*PostQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetQuestionsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetQuestionsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetQuestionsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetQuestionsByUserID(ctx, req.(*GetQuestionsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetQuestionsByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetQuestionsByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetQuestionsByTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetQuestionsByTags(ctx, req.(*GetQuestionsByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetQuestionsByWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsByWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetQuestionsByWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetQuestionsByWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetQuestionsByWord(ctx, req.(*GetQuestionsByWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetQuestionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetQuestionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetQuestionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetQuestionByID(ctx, req.(*GetQuestionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_PostAnswerByQuestionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAnswerByQuestionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).PostAnswerByQuestionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_PostAnswerByQuestionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).PostAnswerByQuestionID(ctx, req.(*PostAnswerByQuestionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteAnswerByAnswerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerByAnswerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteAnswerByAnswerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteAnswerByAnswerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteAnswerByAnswerID(ctx, req.(*DeleteAnswerByAnswerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpvoteAnswerByAnswerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteAnswerByAnswerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpvoteAnswerByAnswerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpvoteAnswerByAnswerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpvoteAnswerByAnswerID(ctx, req.(*UpvoteAnswerByAnswerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DownvoteAnswerByAnswerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownvoteAnswerByAnswerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DownvoteAnswerByAnswerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DownvoteAnswerByAnswerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DownvoteAnswerByAnswerID(ctx, req.(*DownvoteAnswerByAnswerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_FlagQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).FlagQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_FlagQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).FlagQuestion(ctx, req.(*FlagQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_FlagAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).FlagAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_FlagAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).FlagAnswer(ctx, req.(*FlagAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_MarkQuestionAsAnswered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkQuestionAsAnsweredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).MarkQuestionAsAnswered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_MarkQuestionAsAnswered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).MarkQuestionAsAnswered(ctx, req.(*MarkQuestionAsAnsweredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetFlaggedQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlaggedQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetFlaggedQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetFlaggedQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetFlaggedQuestions(ctx, req.(*GetFlaggedQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetFlaggedAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlaggedAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetFlaggedAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetFlaggedAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetFlaggedAnswers(ctx, req.(*GetFlaggedAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetUserFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetUserFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetUserFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetUserFeed(ctx, req.(*GetUserFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddTag(ctx, req.(*AddTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RemoveTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RemoveTag(ctx, req.(*RemoveTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SearchQuestionsAnswersUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SearchQuestionsAnswersUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SearchQuestionsAnswersUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SearchQuestionsAnswersUsers(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostQuestion",
			Handler:    _ContentService_PostQuestion_Handler,
		},
		{
			MethodName: "GetQuestionsByUserID",
			Handler:    _ContentService_GetQuestionsByUserID_Handler,
		},
		{
			MethodName: "GetQuestionsByTags",
			Handler:    _ContentService_GetQuestionsByTags_Handler,
		},
		{
			MethodName: "GetQuestionsByWord",
			Handler:    _ContentService_GetQuestionsByWord_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _ContentService_DeleteQuestion_Handler,
		},
		{
			MethodName: "GetQuestionByID",
			Handler:    _ContentService_GetQuestionByID_Handler,
		},
		{
			MethodName: "PostAnswerByQuestionID",
			Handler:    _ContentService_PostAnswerByQuestionID_Handler,
		},
		{
			MethodName: "DeleteAnswerByAnswerID",
			Handler:    _ContentService_DeleteAnswerByAnswerID_Handler,
		},
		{
			MethodName: "UpvoteAnswerByAnswerID",
			Handler:    _ContentService_UpvoteAnswerByAnswerID_Handler,
		},
		{
			MethodName: "DownvoteAnswerByAnswerID",
			Handler:    _ContentService_DownvoteAnswerByAnswerID_Handler,
		},
		{
			MethodName: "FlagQuestion",
			Handler:    _ContentService_FlagQuestion_Handler,
		},
		{
			MethodName: "FlagAnswer",
			Handler:    _ContentService_FlagAnswer_Handler,
		},
		{
			MethodName: "MarkQuestionAsAnswered",
			Handler:    _ContentService_MarkQuestionAsAnswered_Handler,
		},
		{
			MethodName: "GetFlaggedQuestions",
			Handler:    _ContentService_GetFlaggedQuestions_Handler,
		},
		{
			MethodName: "GetFlaggedAnswers",
			Handler:    _ContentService_GetFlaggedAnswers_Handler,
		},
		{
			MethodName: "GetUserFeed",
			Handler:    _ContentService_GetUserFeed_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _ContentService_AddTag_Handler,
		},
		{
			MethodName: "RemoveTag",
			Handler:    _ContentService_RemoveTag_Handler,
		},
		{
			MethodName: "SearchQuestionsAnswersUsers",
			Handler:    _ContentService_SearchQuestionsAnswersUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/content.proto",
}
