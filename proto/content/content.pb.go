// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.19.6
// source: content/content.proto

package content

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question  string   `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	UserID    string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	CreatedAt int64    `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Tags      []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Details   string   `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *PostQuestionRequest) Reset() {
	*x = PostQuestionRequest{}
	mi := &file_content_content_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostQuestionRequest) ProtoMessage() {}

func (x *PostQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostQuestionRequest.ProtoReflect.Descriptor instead.
func (*PostQuestionRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{0}
}

func (x *PostQuestionRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PostQuestionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PostQuestionRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PostQuestionRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PostQuestionRequest) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type PostQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PostQuestionResponse) Reset() {
	*x = PostQuestionResponse{}
	mi := &file_content_content_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostQuestionResponse) ProtoMessage() {}

func (x *PostQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostQuestionResponse.ProtoReflect.Descriptor instead.
func (*PostQuestionResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{1}
}

func (x *PostQuestionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PostQuestionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetQuestionsByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetQuestionsByUserIDRequest) Reset() {
	*x = GetQuestionsByUserIDRequest{}
	mi := &file_content_content_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByUserIDRequest) ProtoMessage() {}

func (x *GetQuestionsByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionsByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{2}
}

func (x *GetQuestionsByUserIDRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetQuestionsByUserIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetQuestionsByUserIDResponse) Reset() {
	*x = GetQuestionsByUserIDResponse{}
	mi := &file_content_content_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByUserIDResponse) ProtoMessage() {}

func (x *GetQuestionsByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByUserIDResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionsByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{3}
}

func (x *GetQuestionsByUserIDResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type GetQuestionsByTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetQuestionsByTagsRequest) Reset() {
	*x = GetQuestionsByTagsRequest{}
	mi := &file_content_content_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByTagsRequest) ProtoMessage() {}

func (x *GetQuestionsByTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByTagsRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionsByTagsRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{4}
}

func (x *GetQuestionsByTagsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetQuestionsByTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetQuestionsByTagsResponse) Reset() {
	*x = GetQuestionsByTagsResponse{}
	mi := &file_content_content_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByTagsResponse) ProtoMessage() {}

func (x *GetQuestionsByTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByTagsResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionsByTagsResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{5}
}

func (x *GetQuestionsByTagsResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type GetQuestionsByWordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchWord string `protobuf:"bytes,1,opt,name=searchWord,proto3" json:"searchWord,omitempty"`
}

func (x *GetQuestionsByWordRequest) Reset() {
	*x = GetQuestionsByWordRequest{}
	mi := &file_content_content_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByWordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByWordRequest) ProtoMessage() {}

func (x *GetQuestionsByWordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByWordRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionsByWordRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{6}
}

func (x *GetQuestionsByWordRequest) GetSearchWord() string {
	if x != nil {
		return x.SearchWord
	}
	return ""
}

type GetQuestionsByWordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetQuestionsByWordResponse) Reset() {
	*x = GetQuestionsByWordResponse{}
	mi := &file_content_content_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByWordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByWordResponse) ProtoMessage() {}

func (x *GetQuestionsByWordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByWordResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionsByWordResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{7}
}

func (x *GetQuestionsByWordResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type DeleteQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DeleteQuestionRequest) Reset() {
	*x = DeleteQuestionRequest{}
	mi := &file_content_content_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionRequest) ProtoMessage() {}

func (x *DeleteQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteQuestionRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *DeleteQuestionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeleteQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteQuestionResponse) Reset() {
	*x = DeleteQuestionResponse{}
	mi := &file_content_content_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionResponse) ProtoMessage() {}

func (x *DeleteQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuestionResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteQuestionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteQuestionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetQuestionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
}

func (x *GetQuestionByIDRequest) Reset() {
	*x = GetQuestionByIDRequest{}
	mi := &file_content_content_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionByIDRequest) ProtoMessage() {}

func (x *GetQuestionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionByIDRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{10}
}

func (x *GetQuestionByIDRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

type GetQuestionByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question *Question `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Answers  []*Answer `protobuf:"bytes,2,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *GetQuestionByIDResponse) Reset() {
	*x = GetQuestionByIDResponse{}
	mi := &file_content_content_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionByIDResponse) ProtoMessage() {}

func (x *GetQuestionByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionByIDResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionByIDResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{11}
}

func (x *GetQuestionByIDResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *GetQuestionByIDResponse) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type PostAnswerByQuestionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	Answer     string `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *PostAnswerByQuestionIDRequest) Reset() {
	*x = PostAnswerByQuestionIDRequest{}
	mi := &file_content_content_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostAnswerByQuestionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnswerByQuestionIDRequest) ProtoMessage() {}

func (x *PostAnswerByQuestionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnswerByQuestionIDRequest.ProtoReflect.Descriptor instead.
func (*PostAnswerByQuestionIDRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{12}
}

func (x *PostAnswerByQuestionIDRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *PostAnswerByQuestionIDRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *PostAnswerByQuestionIDRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type PostAnswerByQuestionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PostAnswerByQuestionIDResponse) Reset() {
	*x = PostAnswerByQuestionIDResponse{}
	mi := &file_content_content_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostAnswerByQuestionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnswerByQuestionIDResponse) ProtoMessage() {}

func (x *PostAnswerByQuestionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnswerByQuestionIDResponse.ProtoReflect.Descriptor instead.
func (*PostAnswerByQuestionIDResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{13}
}

func (x *PostAnswerByQuestionIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PostAnswerByQuestionIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteAnswerByAnswerIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	AnswerID   string `protobuf:"bytes,2,opt,name=answerID,proto3" json:"answerID,omitempty"`
}

func (x *DeleteAnswerByAnswerIDRequest) Reset() {
	*x = DeleteAnswerByAnswerIDRequest{}
	mi := &file_content_content_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAnswerByAnswerIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnswerByAnswerIDRequest) ProtoMessage() {}

func (x *DeleteAnswerByAnswerIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnswerByAnswerIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnswerByAnswerIDRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAnswerByAnswerIDRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *DeleteAnswerByAnswerIDRequest) GetAnswerID() string {
	if x != nil {
		return x.AnswerID
	}
	return ""
}

type DeleteAnswerByAnswerIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteAnswerByAnswerIDResponse) Reset() {
	*x = DeleteAnswerByAnswerIDResponse{}
	mi := &file_content_content_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAnswerByAnswerIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnswerByAnswerIDResponse) ProtoMessage() {}

func (x *DeleteAnswerByAnswerIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnswerByAnswerIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteAnswerByAnswerIDResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteAnswerByAnswerIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteAnswerByAnswerIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpvoteAnswerByAnswerIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	AnswerID   string `protobuf:"bytes,2,opt,name=answerID,proto3" json:"answerID,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UpvoteAnswerByAnswerIDRequest) Reset() {
	*x = UpvoteAnswerByAnswerIDRequest{}
	mi := &file_content_content_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpvoteAnswerByAnswerIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpvoteAnswerByAnswerIDRequest) ProtoMessage() {}

func (x *UpvoteAnswerByAnswerIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpvoteAnswerByAnswerIDRequest.ProtoReflect.Descriptor instead.
func (*UpvoteAnswerByAnswerIDRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{16}
}

func (x *UpvoteAnswerByAnswerIDRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *UpvoteAnswerByAnswerIDRequest) GetAnswerID() string {
	if x != nil {
		return x.AnswerID
	}
	return ""
}

func (x *UpvoteAnswerByAnswerIDRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UpvoteAnswerByAnswerIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpvoteAnswerByAnswerIDResponse) Reset() {
	*x = UpvoteAnswerByAnswerIDResponse{}
	mi := &file_content_content_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpvoteAnswerByAnswerIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpvoteAnswerByAnswerIDResponse) ProtoMessage() {}

func (x *UpvoteAnswerByAnswerIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpvoteAnswerByAnswerIDResponse.ProtoReflect.Descriptor instead.
func (*UpvoteAnswerByAnswerIDResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{17}
}

func (x *UpvoteAnswerByAnswerIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpvoteAnswerByAnswerIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DownvoteAnswerByAnswerIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	AnswerID   string `protobuf:"bytes,2,opt,name=answerID,proto3" json:"answerID,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DownvoteAnswerByAnswerIDRequest) Reset() {
	*x = DownvoteAnswerByAnswerIDRequest{}
	mi := &file_content_content_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownvoteAnswerByAnswerIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownvoteAnswerByAnswerIDRequest) ProtoMessage() {}

func (x *DownvoteAnswerByAnswerIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownvoteAnswerByAnswerIDRequest.ProtoReflect.Descriptor instead.
func (*DownvoteAnswerByAnswerIDRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{18}
}

func (x *DownvoteAnswerByAnswerIDRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *DownvoteAnswerByAnswerIDRequest) GetAnswerID() string {
	if x != nil {
		return x.AnswerID
	}
	return ""
}

func (x *DownvoteAnswerByAnswerIDRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DownvoteAnswerByAnswerIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DownvoteAnswerByAnswerIDResponse) Reset() {
	*x = DownvoteAnswerByAnswerIDResponse{}
	mi := &file_content_content_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownvoteAnswerByAnswerIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownvoteAnswerByAnswerIDResponse) ProtoMessage() {}

func (x *DownvoteAnswerByAnswerIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownvoteAnswerByAnswerIDResponse.ProtoReflect.Descriptor instead.
func (*DownvoteAnswerByAnswerIDResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{19}
}

func (x *DownvoteAnswerByAnswerIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DownvoteAnswerByAnswerIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FlagQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Reason     string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *FlagQuestionRequest) Reset() {
	*x = FlagQuestionRequest{}
	mi := &file_content_content_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagQuestionRequest) ProtoMessage() {}

func (x *FlagQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagQuestionRequest.ProtoReflect.Descriptor instead.
func (*FlagQuestionRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{20}
}

func (x *FlagQuestionRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *FlagQuestionRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *FlagQuestionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type FlagQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FlagQuestionResponse) Reset() {
	*x = FlagQuestionResponse{}
	mi := &file_content_content_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagQuestionResponse) ProtoMessage() {}

func (x *FlagQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagQuestionResponse.ProtoReflect.Descriptor instead.
func (*FlagQuestionResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{21}
}

func (x *FlagQuestionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FlagQuestionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FlagAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	AnswerID   string `protobuf:"bytes,2,opt,name=answerID,proto3" json:"answerID,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Reason     string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *FlagAnswerRequest) Reset() {
	*x = FlagAnswerRequest{}
	mi := &file_content_content_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagAnswerRequest) ProtoMessage() {}

func (x *FlagAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagAnswerRequest.ProtoReflect.Descriptor instead.
func (*FlagAnswerRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{22}
}

func (x *FlagAnswerRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *FlagAnswerRequest) GetAnswerID() string {
	if x != nil {
		return x.AnswerID
	}
	return ""
}

func (x *FlagAnswerRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *FlagAnswerRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type FlagAnswerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FlagAnswerResponse) Reset() {
	*x = FlagAnswerResponse{}
	mi := &file_content_content_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagAnswerResponse) ProtoMessage() {}

func (x *FlagAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagAnswerResponse.ProtoReflect.Descriptor instead.
func (*FlagAnswerResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{23}
}

func (x *FlagAnswerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FlagAnswerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MarkQuestionAsAnsweredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
}

func (x *MarkQuestionAsAnsweredRequest) Reset() {
	*x = MarkQuestionAsAnsweredRequest{}
	mi := &file_content_content_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkQuestionAsAnsweredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkQuestionAsAnsweredRequest) ProtoMessage() {}

func (x *MarkQuestionAsAnsweredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkQuestionAsAnsweredRequest.ProtoReflect.Descriptor instead.
func (*MarkQuestionAsAnsweredRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{24}
}

func (x *MarkQuestionAsAnsweredRequest) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

type MarkQuestionAsAnsweredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MarkQuestionAsAnsweredResponse) Reset() {
	*x = MarkQuestionAsAnsweredResponse{}
	mi := &file_content_content_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkQuestionAsAnsweredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkQuestionAsAnsweredResponse) ProtoMessage() {}

func (x *MarkQuestionAsAnsweredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkQuestionAsAnsweredResponse.ProtoReflect.Descriptor instead.
func (*MarkQuestionAsAnsweredResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{25}
}

func (x *MarkQuestionAsAnsweredResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MarkQuestionAsAnsweredResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionID string   `protobuf:"bytes,1,opt,name=questionID,proto3" json:"questionID,omitempty"`
	Question   string   `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	UserID     string   `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	CreatedAt  int64    `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Tags       []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	IsAnswered bool     `protobuf:"varint,6,opt,name=isAnswered,proto3" json:"isAnswered,omitempty"`
	Details    string   `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_content_content_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{26}
}

func (x *Question) GetQuestionID() string {
	if x != nil {
		return x.QuestionID
	}
	return ""
}

func (x *Question) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Question) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Question) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Question) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Question) GetIsAnswered() bool {
	if x != nil {
		return x.IsAnswered
	}
	return false
}

func (x *Question) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuestionId string `protobuf:"bytes,2,opt,name=questionId,proto3" json:"questionId,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AnswerText string `protobuf:"bytes,4,opt,name=answerText,proto3" json:"answerText,omitempty"`
	Upvotes    int32  `protobuf:"varint,5,opt,name=upvotes,proto3" json:"upvotes,omitempty"`
	Downvotes  int32  `protobuf:"varint,6,opt,name=downvotes,proto3" json:"downvotes,omitempty"`
	IsFlagged  bool   `protobuf:"varint,7,opt,name=isFlagged,proto3" json:"isFlagged,omitempty"`
	CreatedAt  int64  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_content_content_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{27}
}

func (x *Answer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Answer) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *Answer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Answer) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *Answer) GetUpvotes() int32 {
	if x != nil {
		return x.Upvotes
	}
	return 0
}

func (x *Answer) GetDownvotes() int32 {
	if x != nil {
		return x.Downvotes
	}
	return 0
}

func (x *Answer) GetIsFlagged() bool {
	if x != nil {
		return x.IsFlagged
	}
	return false
}

func (x *Answer) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Answer) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type GetFlaggedQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFlaggedQuestionsRequest) Reset() {
	*x = GetFlaggedQuestionsRequest{}
	mi := &file_content_content_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlaggedQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlaggedQuestionsRequest) ProtoMessage() {}

func (x *GetFlaggedQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlaggedQuestionsRequest.ProtoReflect.Descriptor instead.
func (*GetFlaggedQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{28}
}

type GetFlaggedQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlaggedQuestions      []*Question `protobuf:"bytes,1,rep,name=flaggedQuestions,proto3" json:"flaggedQuestions,omitempty"`
	TotalFlaggedQuestions int32       `protobuf:"varint,2,opt,name=totalFlaggedQuestions,proto3" json:"totalFlaggedQuestions,omitempty"`
}

func (x *GetFlaggedQuestionsResponse) Reset() {
	*x = GetFlaggedQuestionsResponse{}
	mi := &file_content_content_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlaggedQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlaggedQuestionsResponse) ProtoMessage() {}

func (x *GetFlaggedQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlaggedQuestionsResponse.ProtoReflect.Descriptor instead.
func (*GetFlaggedQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{29}
}

func (x *GetFlaggedQuestionsResponse) GetFlaggedQuestions() []*Question {
	if x != nil {
		return x.FlaggedQuestions
	}
	return nil
}

func (x *GetFlaggedQuestionsResponse) GetTotalFlaggedQuestions() int32 {
	if x != nil {
		return x.TotalFlaggedQuestions
	}
	return 0
}

type GetFlaggedAnswersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFlaggedAnswersRequest) Reset() {
	*x = GetFlaggedAnswersRequest{}
	mi := &file_content_content_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlaggedAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlaggedAnswersRequest) ProtoMessage() {}

func (x *GetFlaggedAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlaggedAnswersRequest.ProtoReflect.Descriptor instead.
func (*GetFlaggedAnswersRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{30}
}

type GetFlaggedAnswersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlaggedAnswers      []*Answer `protobuf:"bytes,1,rep,name=flaggedAnswers,proto3" json:"flaggedAnswers,omitempty"`
	TotalFlaggedAnswers int32     `protobuf:"varint,2,opt,name=totalFlaggedAnswers,proto3" json:"totalFlaggedAnswers,omitempty"`
}

func (x *GetFlaggedAnswersResponse) Reset() {
	*x = GetFlaggedAnswersResponse{}
	mi := &file_content_content_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlaggedAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlaggedAnswersResponse) ProtoMessage() {}

func (x *GetFlaggedAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlaggedAnswersResponse.ProtoReflect.Descriptor instead.
func (*GetFlaggedAnswersResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{31}
}

func (x *GetFlaggedAnswersResponse) GetFlaggedAnswers() []*Answer {
	if x != nil {
		return x.FlaggedAnswers
	}
	return nil
}

func (x *GetFlaggedAnswersResponse) GetTotalFlaggedAnswers() int32 {
	if x != nil {
		return x.TotalFlaggedAnswers
	}
	return 0
}

type GetUserFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetUserFeedRequest) Reset() {
	*x = GetUserFeedRequest{}
	mi := &file_content_content_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFeedRequest) ProtoMessage() {}

func (x *GetUserFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFeedRequest.ProtoReflect.Descriptor instead.
func (*GetUserFeedRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{32}
}

func (x *GetUserFeedRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetUserFeedResponse) Reset() {
	*x = GetUserFeedResponse{}
	mi := &file_content_content_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFeedResponse) ProtoMessage() {}

func (x *GetUserFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFeedResponse.ProtoReflect.Descriptor instead.
func (*GetUserFeedResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{33}
}

func (x *GetUserFeedResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type AddTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName string `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *AddTagRequest) Reset() {
	*x = AddTagRequest{}
	mi := &file_content_content_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagRequest) ProtoMessage() {}

func (x *AddTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagRequest.ProtoReflect.Descriptor instead.
func (*AddTagRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{34}
}

func (x *AddTagRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type AddTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddTagResponse) Reset() {
	*x = AddTagResponse{}
	mi := &file_content_content_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagResponse) ProtoMessage() {}

func (x *AddTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagResponse.ProtoReflect.Descriptor instead.
func (*AddTagResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{35}
}

func (x *AddTagResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddTagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RemoveTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName string `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *RemoveTagRequest) Reset() {
	*x = RemoveTagRequest{}
	mi := &file_content_content_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagRequest) ProtoMessage() {}

func (x *RemoveTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagRequest.ProtoReflect.Descriptor instead.
func (*RemoveTagRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{36}
}

func (x *RemoveTagRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type RemoveTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RemoveTagResponse) Reset() {
	*x = RemoveTagResponse{}
	mi := &file_content_content_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagResponse) ProtoMessage() {}

func (x *RemoveTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagResponse.ProtoReflect.Descriptor instead.
func (*RemoveTagResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{37}
}

func (x *RemoveTagResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveTagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_content_content_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{38}
}

func (x *SearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_content_content_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_content_content_proto_rawDescGZIP(), []int{39}
}

func (x *SearchResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

var File_content_content_proto protoreflect.FileDescriptor

var file_content_content_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x95, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4d, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x73, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a,
	0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x73, 0x0a, 0x1d, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x1e, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x1f, 0x44,
	0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x56, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x13, 0x46, 0x6c,
	0x61, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x4a, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a,
	0x11, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x48,
	0x0a, 0x12, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x6b,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x1e, 0x4d, 0x61, 0x72,
	0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x82, 0x02, 0x0a,
	0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x77,
	0x6e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f,
	0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x46, 0x6c, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x92, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x86, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0e, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x29, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2c, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x41, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xb1, 0x0d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42,
	0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x55, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6f, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74,
	0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x42, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x12,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x41, 0x64,
	0x64, 0x54, 0x61, 0x67, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x67, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x1b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_content_content_proto_rawDescOnce sync.Once
	file_content_content_proto_rawDescData = file_content_content_proto_rawDesc
)

func file_content_content_proto_rawDescGZIP() []byte {
	file_content_content_proto_rawDescOnce.Do(func() {
		file_content_content_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_content_proto_rawDescData)
	})
	return file_content_content_proto_rawDescData
}

var file_content_content_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_content_content_proto_goTypes = []any{
	(*PostQuestionRequest)(nil),              // 0: content.PostQuestionRequest
	(*PostQuestionResponse)(nil),             // 1: content.PostQuestionResponse
	(*GetQuestionsByUserIDRequest)(nil),      // 2: content.GetQuestionsByUserIDRequest
	(*GetQuestionsByUserIDResponse)(nil),     // 3: content.GetQuestionsByUserIDResponse
	(*GetQuestionsByTagsRequest)(nil),        // 4: content.GetQuestionsByTagsRequest
	(*GetQuestionsByTagsResponse)(nil),       // 5: content.GetQuestionsByTagsResponse
	(*GetQuestionsByWordRequest)(nil),        // 6: content.GetQuestionsByWordRequest
	(*GetQuestionsByWordResponse)(nil),       // 7: content.GetQuestionsByWordResponse
	(*DeleteQuestionRequest)(nil),            // 8: content.DeleteQuestionRequest
	(*DeleteQuestionResponse)(nil),           // 9: content.DeleteQuestionResponse
	(*GetQuestionByIDRequest)(nil),           // 10: content.GetQuestionByIDRequest
	(*GetQuestionByIDResponse)(nil),          // 11: content.GetQuestionByIDResponse
	(*PostAnswerByQuestionIDRequest)(nil),    // 12: content.PostAnswerByQuestionIDRequest
	(*PostAnswerByQuestionIDResponse)(nil),   // 13: content.PostAnswerByQuestionIDResponse
	(*DeleteAnswerByAnswerIDRequest)(nil),    // 14: content.DeleteAnswerByAnswerIDRequest
	(*DeleteAnswerByAnswerIDResponse)(nil),   // 15: content.DeleteAnswerByAnswerIDResponse
	(*UpvoteAnswerByAnswerIDRequest)(nil),    // 16: content.UpvoteAnswerByAnswerIDRequest
	(*UpvoteAnswerByAnswerIDResponse)(nil),   // 17: content.UpvoteAnswerByAnswerIDResponse
	(*DownvoteAnswerByAnswerIDRequest)(nil),  // 18: content.DownvoteAnswerByAnswerIDRequest
	(*DownvoteAnswerByAnswerIDResponse)(nil), // 19: content.DownvoteAnswerByAnswerIDResponse
	(*FlagQuestionRequest)(nil),              // 20: content.FlagQuestionRequest
	(*FlagQuestionResponse)(nil),             // 21: content.FlagQuestionResponse
	(*FlagAnswerRequest)(nil),                // 22: content.FlagAnswerRequest
	(*FlagAnswerResponse)(nil),               // 23: content.FlagAnswerResponse
	(*MarkQuestionAsAnsweredRequest)(nil),    // 24: content.MarkQuestionAsAnsweredRequest
	(*MarkQuestionAsAnsweredResponse)(nil),   // 25: content.MarkQuestionAsAnsweredResponse
	(*Question)(nil),                         // 26: content.Question
	(*Answer)(nil),                           // 27: content.Answer
	(*GetFlaggedQuestionsRequest)(nil),       // 28: content.GetFlaggedQuestionsRequest
	(*GetFlaggedQuestionsResponse)(nil),      // 29: content.GetFlaggedQuestionsResponse
	(*GetFlaggedAnswersRequest)(nil),         // 30: content.GetFlaggedAnswersRequest
	(*GetFlaggedAnswersResponse)(nil),        // 31: content.GetFlaggedAnswersResponse
	(*GetUserFeedRequest)(nil),               // 32: content.GetUserFeedRequest
	(*GetUserFeedResponse)(nil),              // 33: content.GetUserFeedResponse
	(*AddTagRequest)(nil),                    // 34: content.AddTagRequest
	(*AddTagResponse)(nil),                   // 35: content.AddTagResponse
	(*RemoveTagRequest)(nil),                 // 36: content.RemoveTagRequest
	(*RemoveTagResponse)(nil),                // 37: content.RemoveTagResponse
	(*SearchRequest)(nil),                    // 38: content.SearchRequest
	(*SearchResponse)(nil),                   // 39: content.SearchResponse
}
var file_content_content_proto_depIdxs = []int32{
	26, // 0: content.GetQuestionsByUserIDResponse.questions:type_name -> content.Question
	26, // 1: content.GetQuestionsByTagsResponse.questions:type_name -> content.Question
	26, // 2: content.GetQuestionsByWordResponse.questions:type_name -> content.Question
	26, // 3: content.GetQuestionByIDResponse.question:type_name -> content.Question
	27, // 4: content.GetQuestionByIDResponse.answers:type_name -> content.Answer
	26, // 5: content.GetFlaggedQuestionsResponse.flaggedQuestions:type_name -> content.Question
	27, // 6: content.GetFlaggedAnswersResponse.flaggedAnswers:type_name -> content.Answer
	26, // 7: content.GetUserFeedResponse.questions:type_name -> content.Question
	26, // 8: content.SearchResponse.questions:type_name -> content.Question
	0,  // 9: content.ContentService.PostQuestion:input_type -> content.PostQuestionRequest
	2,  // 10: content.ContentService.GetQuestionsByUserID:input_type -> content.GetQuestionsByUserIDRequest
	4,  // 11: content.ContentService.GetQuestionsByTags:input_type -> content.GetQuestionsByTagsRequest
	6,  // 12: content.ContentService.GetQuestionsByWord:input_type -> content.GetQuestionsByWordRequest
	8,  // 13: content.ContentService.DeleteQuestion:input_type -> content.DeleteQuestionRequest
	10, // 14: content.ContentService.GetQuestionByID:input_type -> content.GetQuestionByIDRequest
	12, // 15: content.ContentService.PostAnswerByQuestionID:input_type -> content.PostAnswerByQuestionIDRequest
	14, // 16: content.ContentService.DeleteAnswerByAnswerID:input_type -> content.DeleteAnswerByAnswerIDRequest
	16, // 17: content.ContentService.UpvoteAnswerByAnswerID:input_type -> content.UpvoteAnswerByAnswerIDRequest
	18, // 18: content.ContentService.DownvoteAnswerByAnswerID:input_type -> content.DownvoteAnswerByAnswerIDRequest
	20, // 19: content.ContentService.FlagQuestion:input_type -> content.FlagQuestionRequest
	22, // 20: content.ContentService.FlagAnswer:input_type -> content.FlagAnswerRequest
	24, // 21: content.ContentService.MarkQuestionAsAnswered:input_type -> content.MarkQuestionAsAnsweredRequest
	28, // 22: content.ContentService.GetFlaggedQuestions:input_type -> content.GetFlaggedQuestionsRequest
	30, // 23: content.ContentService.GetFlaggedAnswers:input_type -> content.GetFlaggedAnswersRequest
	32, // 24: content.ContentService.GetUserFeed:input_type -> content.GetUserFeedRequest
	34, // 25: content.ContentService.AddTag:input_type -> content.AddTagRequest
	36, // 26: content.ContentService.RemoveTag:input_type -> content.RemoveTagRequest
	38, // 27: content.ContentService.SearchQuestionsAnswersUsers:input_type -> content.SearchRequest
	1,  // 28: content.ContentService.PostQuestion:output_type -> content.PostQuestionResponse
	3,  // 29: content.ContentService.GetQuestionsByUserID:output_type -> content.GetQuestionsByUserIDResponse
	5,  // 30: content.ContentService.GetQuestionsByTags:output_type -> content.GetQuestionsByTagsResponse
	7,  // 31: content.ContentService.GetQuestionsByWord:output_type -> content.GetQuestionsByWordResponse
	9,  // 32: content.ContentService.DeleteQuestion:output_type -> content.DeleteQuestionResponse
	11, // 33: content.ContentService.GetQuestionByID:output_type -> content.GetQuestionByIDResponse
	13, // 34: content.ContentService.PostAnswerByQuestionID:output_type -> content.PostAnswerByQuestionIDResponse
	15, // 35: content.ContentService.DeleteAnswerByAnswerID:output_type -> content.DeleteAnswerByAnswerIDResponse
	17, // 36: content.ContentService.UpvoteAnswerByAnswerID:output_type -> content.UpvoteAnswerByAnswerIDResponse
	19, // 37: content.ContentService.DownvoteAnswerByAnswerID:output_type -> content.DownvoteAnswerByAnswerIDResponse
	21, // 38: content.ContentService.FlagQuestion:output_type -> content.FlagQuestionResponse
	23, // 39: content.ContentService.FlagAnswer:output_type -> content.FlagAnswerResponse
	25, // 40: content.ContentService.MarkQuestionAsAnswered:output_type -> content.MarkQuestionAsAnsweredResponse
	29, // 41: content.ContentService.GetFlaggedQuestions:output_type -> content.GetFlaggedQuestionsResponse
	31, // 42: content.ContentService.GetFlaggedAnswers:output_type -> content.GetFlaggedAnswersResponse
	33, // 43: content.ContentService.GetUserFeed:output_type -> content.GetUserFeedResponse
	35, // 44: content.ContentService.AddTag:output_type -> content.AddTagResponse
	37, // 45: content.ContentService.RemoveTag:output_type -> content.RemoveTagResponse
	39, // 46: content.ContentService.SearchQuestionsAnswersUsers:output_type -> content.SearchResponse
	28, // [28:47] is the sub-list for method output_type
	9,  // [9:28] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_content_content_proto_init() }
func file_content_content_proto_init() {
	if File_content_content_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_content_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_content_proto_goTypes,
		DependencyIndexes: file_content_content_proto_depIdxs,
		MessageInfos:      file_content_content_proto_msgTypes,
	}.Build()
	File_content_content_proto = out.File
	file_content_content_proto_rawDesc = nil
	file_content_content_proto_goTypes = nil
	file_content_content_proto_depIdxs = nil
}
